/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/api/networking/v1alpha1"
)

// PodNetworkSpecApplyConfiguration represents an declarative configuration of the PodNetworkSpec type for use
// with apply.
type PodNetworkSpecApplyConfiguration struct {
	IPAM4          *v1alpha1.IPAMType                `json:"ipam4,omitempty"`
	IPAM6          *v1alpha1.IPAMType                `json:"ipam6,omitempty"`
	ParametersRefs []ParametersRefApplyConfiguration `json:"parametersRefs,omitempty"`
	Provider       *string                           `json:"provider,omitempty"`
}

// PodNetworkSpecApplyConfiguration constructs an declarative configuration of the PodNetworkSpec type for use with
// apply.
func PodNetworkSpec() *PodNetworkSpecApplyConfiguration {
	return &PodNetworkSpecApplyConfiguration{}
}

// WithIPAM4 sets the IPAM4 field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPAM4 field is set to the value of the last call.
func (b *PodNetworkSpecApplyConfiguration) WithIPAM4(value v1alpha1.IPAMType) *PodNetworkSpecApplyConfiguration {
	b.IPAM4 = &value
	return b
}

// WithIPAM6 sets the IPAM6 field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPAM6 field is set to the value of the last call.
func (b *PodNetworkSpecApplyConfiguration) WithIPAM6(value v1alpha1.IPAMType) *PodNetworkSpecApplyConfiguration {
	b.IPAM6 = &value
	return b
}

// WithParametersRefs adds the given value to the ParametersRefs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ParametersRefs field.
func (b *PodNetworkSpecApplyConfiguration) WithParametersRefs(values ...*ParametersRefApplyConfiguration) *PodNetworkSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithParametersRefs")
		}
		b.ParametersRefs = append(b.ParametersRefs, *values[i])
	}
	return b
}

// WithProvider sets the Provider field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Provider field is set to the value of the last call.
func (b *PodNetworkSpecApplyConfiguration) WithProvider(value string) *PodNetworkSpecApplyConfiguration {
	b.Provider = &value
	return b
}
